{
  "id": "lunch-concert",
  "name": "S3 Lunch Concert",
  "channel": "816026941139845130",

  "description": {
    "general": "It’s lunchtime at your school! Your N friends are all standing on a long field, as they usually do. The field can be represented as a number line, with the ith friend initially at position Pi metres along it. The ith friend is able to walk in either direction along the field at a rate of one metre per Wi seconds, and their hearing is good enough to be able to hear music up to and including Di metres away from their position. Multiple students may occupy the same positions on the field, both initially and after walking.\n\nYou’re going to hold a little concert at some position c metres along the field (where c is any integer of your choice), and text all of your friends about it. Once you do, each of them will walk along the field for the minimum amount of time such that they end up being able to hear your concert (in other words, such that each friend i ends up within Di units of c).\n\nYou’d like to choose c such that you minimize the sum of all N of your friends’ walking times. What is this minimum sum (in seconds)? Please note that the result might not fit within a 32-bit integer.",
    "input": "The first line of input contains N.\nThe next N lines contain three space-separated integers, Pi, Wi, and Di (1 ≤ i ≤ N).",
    "output": "Output one integer which is the minimum possible sum of walking times (in seconds) for all N of your friends to be able to hear your concert.",

    "samples": [
      {
        "input": "1\n0 1000 0",
        "output": "0",
        "explanation": "If you choose c = 0, your single friend won’t need to walk at all to hear it."
      },
      {
        "input": "2\n10 4 3\n20 4 2",
        "output": "20",
        "explanation": "One possible optimal choice of c is 14, which would require your first friend to walk to position 11 (taking 4 × 1 = 4 seconds) and your second friend to walk to position 16 (taking 4 × 4 = 16 seconds), for a total of 20 seconds."
      },
      {
        "input": "3\n6 8 3\n1 4 1\n14 5 2",
        "output": "43"
      }
    ]
  },

  "tests": [
    {
      "type": "files",
      "input": "s3[.](?<case>\\d+[-]\\d+)[.]in",
      "output": "s3[.](?<case>\\d+[-]\\d+)[.]out"
    }
  ]
}